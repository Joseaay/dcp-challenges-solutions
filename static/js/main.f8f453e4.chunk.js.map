{"version":3,"sources":["../challenges/1.js","../challenges/10.js","../challenges/11.js","../challenges/12.js","../challenges/13.js","../challenges/14.js","../challenges/2.js","../challenges/3.js","../challenges/4.js","../challenges/5.js","../challenges/6.js","../challenges/7.js","../challenges/8.js","../challenges/9.js","../challenges sync /^/.//.*/.js$","webpack:///./challenges/1.js?623c","webpack:///./challenges/10.js?76ed","webpack:///./challenges/11.js?9b0b","webpack:///./challenges/12.js?f48b","webpack:///./challenges/13.js?7354","webpack:///./challenges/14.js?af9c","webpack:///./challenges/2.js?0a1d","webpack:///./challenges/3.js?e2f7","webpack:///./challenges/4.js?5c03","webpack:///./challenges/5.js?5d1b","webpack:///./challenges/6.js?453c","webpack:///./challenges/7.js?31fe","webpack:///./challenges/8.js?be9b","webpack:///./challenges/9.js?a0ae","AppContext.js","components/hoc/context-consumer.hoc.jsx","components/common/Tab/Tab.jsx","components/common/Tabs/Tabs.jsx","helpers/find-arguments.js","helpers/calculate-performance-time.js","helpers/generate-input-fields.js","components/ChallengeSolution/ChallengeSolution.jsx","helpers/get-raw-challenge.js","helpers/reduce-function-garbage.js","components/Box/Box.jsx","App.jsx","index.js","../ /^/.//.*/.js$"],"names":["module","exports","map","./1.js","./10.js","./11.js","./12.js","./13.js","./14.js","./2.js","./3.js","./4.js","./5.js","./6.js","./7.js","./8.js","./9.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","r","__webpack_exports__","d","dcpChallenge1","list","k","some","includes","dcpChallenge10","n","setTimeout","_","alert","dcpChallenge11","s","a","filter","queryString","slice","length","dcpChallenge12","_home_travis_build_Joseaay_dcp_challenges_solutions_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","tree","Array","splice","forEach","step","reduce","b","dcpChallenge13","split","loopElement1","i","distinctChars","Set","stop","concat","substr","loopElement2","size","add","has","join","dcpChallenge14","dcpChallenge2","fi","dcpChallenge3","_home_travis_build_Joseaay_dcp_challenges_solutions_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","Node","val","left","right","this","_deserialize","nodeArray","value","shift","string","node","serialize","push","toString","dcpChallenge4","lowestNumber","calculateLowestNumber","dcpChallenge5","cons","car","cdr","pair","dcpChallenge6","dcpChallenge7","message","recursiveMessageDecoder","result","Number","dcpChallenge8","name","universalTree","node_tree","calculateDepthUniversalTree","accVal","dcpChallenge9","AppContext","React","createContext","selectedTab","changeTab","contextConsumer","WrappedComponent","parentProps","react_default","createElement","Consumer","consumerProps","assign","TabComponent","_ref","style","selected","onClick","className","TabsComponent","_useState","useState","tabs","slicedToArray","_useState3","_useState4","tabPage","setTabPage","nextPageButtonAvailable","Math","abs","floor","prevPageButtonAvailable","toConsumableArray","key","transform","findArguments","numChallenge","require","line","replace","defaultResponse","error","time","calculatePerformanceTime","funcToTest","challengeNumber","inputsValues","returnedResult","initialTime","window","performance","now","challengeArguments","generatedArgs","x","arrayNumber","arrayString","String","number","apply","console","objectSpread","endTime","generateInputFields","num","updateFunc","inputs","inputType","index","onChange","defineProperty","target","inputTypes","ChallengeSolutionComponent","_useState2","setInputs","setResult","evaluateFunction","react_highlight_default","language","type","BoxComponent","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","state","Provider","Box_BoxComponent","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f8f453e4.chunk.js","sourcesContent":["module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #1\\n// ---------------------------------------------------------\\n// This problem was recently asked by Google.\\n//\\n// Given a list of numbers and a number k, return whether any\\n// two numbers from the list add up to k.\\n//\\n// Example:\\n// Given [10, 15, 3, 7] and k of 17, return true since 10 + 7\\n// is 17.\\n// REMOVE::arguments:arrayNumber,number\\n\\nexport const dcpChallenge1 = (list, k) => list.some(e => list.includes(k - e));\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #10\\n// ---------------------------------------------------------\\n// This problem was asked by Apple.\\n//\\n// Implement a job scheduler which takes in a function f and\\n// an integer n, and calls f after n milliseconds.\\n// REMOVE::arguments:number\\n\\nconst callbackFunction = _ => alert(\\\"Here I am!\\\");\\n\\nexport const dcpChallenge10 = n => setTimeout(_ => callbackFunction(), n);\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #11\\n// ---------------------------------------------------------\\n// This problem was asked by Twitter.\\n//\\n// Implement an autocomplete system. That is, given a query\\n// string s and a set of all possible query strings, return\\n// all strings in the set that have s as a prefix.\\n//\\n// For example, given the query string de and the set of strings\\n// [dog, deer, deal], return [deer, deal].\\n// REMOVE::arguments:string,arrayString\\n\\nexport const dcpChallenge11 = (s, a) =>\\n    a.filter(\\n        queryString => s === queryString.slice(0, s.length - queryString.length)\\n    );\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #12\\n// ---------------------------------------------------------\\n// This problem was asked by Amazon.\\n//\\n// There exists a staircase with N steps, and you can climb\\n// up either 1 or 2 steps at a time. Given N, write a function\\n// that returns the number of unique ways you can climb the\\n// staircase. The order of the steps matters.\\n//\\n// For example, if N is 4, then there are 5 unique ways:\\n//\\n// 1, 1, 1, 1\\n// 2, 1, 1\\n// 1, 2, 1\\n// 1, 1, 2\\n// 2, 2\\n//\\n// What if, instead of being able to climb 1 or 2 steps at a time,\\n// you could climb any number from a set of positive integers X?\\n// For example, if X = {1, 3, 5}, you could climb 1, 3, or 5 steps\\n// at a time.\\n// REMOVE::arguments:number,arrayNumber\\n\\nexport const dcpChallenge12 = (n, list) => {\\n    let tree = [];\\n    tree[0] = 1;\\n    tree[1] = 1;\\n    [...Object(Array(n + 1)).keys()].splice(2).forEach(e => {\\n        tree[e] = list\\n            .map(step => (tree[e - step] ? tree[e - step] : 0))\\n            .reduce((a, b) => a + b);\\n    });\\n    return tree[n];\\n};\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #13\\n// ---------------------------------------------------------\\n// This problem was asked by Amazon.\\n//\\n// Given an integer k and a string s, find the length of the\\n// longest substring that contains at most k distinct\\n// characters.\\n//\\n// For example, given s = \\\"abcba\\\" and k = 2, the longest\\n// substring with k distinct characters is \\\"bcb\\\".\\n// REMOVE::arguments:number,string\\n\\nexport const dcpChallenge13 = (k, s) =>\\n\\ts\\n\\t\\t.split(\\\"\\\")\\n\\t\\t.map((loopElement1, i) => {\\n\\t\\t\\tlet distinctChars = new Set(loopElement1);\\n\\t\\t\\tlet stop = false;\\n\\t\\t\\treturn [loopElement1].concat(\\n\\t\\t\\t\\ts\\n\\t\\t\\t\\t\\t.substr(i + 1)\\n\\t\\t\\t\\t\\t.split(\\\"\\\")\\n\\t\\t\\t\\t\\t.filter(loopElement2 => {\\n\\t\\t\\t\\t\\t\\tif (distinctChars.size < k) {\\n\\t\\t\\t\\t\\t\\t\\tdistinctChars.add(loopElement2);\\n\\t\\t\\t\\t\\t\\t\\treturn loopElement2;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (distinctChars.has(loopElement2) && !stop) {\\n\\t\\t\\t\\t\\t\\t\\treturn loopElement2;\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tstop = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t})\\n\\t\\t.reduce((a, b) => (b.length > a.length ? b : a))\\n\\t\\t.join(\\\"\\\");\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #14\\n// ---------------------------------------------------------\\n// This problem was asked by Google.\\n//\\n// The area of a circle is defined as πr^2. Estimate π to 3\\n// decimal places using a Monte Carlo method.\\n//\\n// Hint: The basic equation of a circle is x2 + y2 = r2.\\n// REMOVE::arguments:number,string\\n\\nexport const dcpChallenge14 = () => null;\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #2\\n// ---------------------------------------------------------\\n// This problem was asked by Uber.\\n//\\n// Given an array of integers, return a new array such that each\\n// element at index i of the new array is the product of all the\\n// numbers in the original array except the one at i.\\n//\\n// Example:\\n// If our input was [1, 2, 3, 4, 5], the expected output would be\\n// [120, 60, 40, 30, 24]. If our input was [3, 2, 1], the expected\\n// output would be [2, 3, 6].\\n// REMOVE::arguments:arrayNumber\\n\\nexport const dcpChallenge2 = list =>\\n    list.map((_, i) =>\\n        list.filter((_, fi) => fi !== i).reduce((a, b) => a * b)\\n    );\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #3\\n// ---------------------------------------------------------\\n// This problem was asked by Google.\\n//\\n// Given the root to a binary tree, implement serialize(root),\\n// which serializes the tree into a string, and deserialize(s),\\n// which deserializes the string back into the tree.\\n//\\n// Example:\\n// given the following Node class\\n//\\n// class Node:\\n// def __init__(self, val, left=None, right=None):\\n//     self.val = val\\n//     self.left = left\\n//     self.right = right\\n// The following test should pass:\\n//\\n// node = Node('root', Node('left', Node('left.left')), Node('right'))\\n// assert deserialize(serialize(node)).left.left.val == 'left.left'\\n\\nclass Node {\\n    constructor(val, left, right) {\\n        this.val = val;\\n        this.left = left;\\n        this.right = right;\\n    }\\n}\\n\\nconst serialize = node => {\\n    let nodeArray = [];\\n    node\\n        ? nodeArray.push(node.val, serialize(node.left), serialize(node.right))\\n        : nodeArray.push(\\\"void\\\");\\n    return nodeArray.toString();\\n};\\n\\nconst deserialize = string => _deserialize(string.split(\\\",\\\"));\\n\\nconst _deserialize = nodeArray => {\\n    if (nodeArray.length === 0) return undefined;\\n    const value = nodeArray.shift();\\n    return value !== \\\"void\\\"\\n        ? new Node(value, _deserialize(nodeArray), _deserialize(nodeArray))\\n        : new Node();\\n};\\n\\nexport const dcpChallenge3 = () => {\\n    let node = new Node(\\n        \\\"root\\\",\\n        new Node(\\\"left\\\", new Node(\\\"left.left\\\")),\\n        new Node(\\\"right\\\")\\n    );\\n    return deserialize(serialize(node)).left.left.val === \\\"left.left\\\";\\n};\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #4\\n// ---------------------------------------------------------\\n// This problem was asked by Stripe.\\n//\\n// Given an array of integers, find the first missing positive\\n// integer in linear time and constant space. In other words,\\n// find the lowest positive integer that does not exist in the\\n// array. The array can contain duplicates and negative numbers\\n// as well.\\n//\\n// For example, the input [3, 4, -1, 1] should give 2. The input\\n// [1, 2, 0] should give 3.\\n//\\n//You can modify the input array in-place.\\n// REMOVE::arguments:arrayNumber\\n\\nexport const dcpChallenge4 = list => {\\n    const lowestNumber = list.reduce((a, b) =>\\n        a && b >= 0 ? (a < b ? a : b) : 0\\n    );\\n    return calculateLowestNumber(lowestNumber + 1, list);\\n};\\n\\nconst calculateLowestNumber = (n, list) =>\\n    !list.includes(n) ? n : calculateLowestNumber(n + 1, list);\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #5\\n// ---------------------------------------------------------\\n// This problem was asked by Jane Street.\\n//\\n// cons(a, b) constructs a pair, and car(pair) and cdr(pair)\\n// returns the first and last element of that pair. For\\n// example, car(cons(3, 4)) returns 3, and cdr(cons(3, 4))\\n// returns 4.\\n//\\n// Given this implementation of cons:\\n// def cons(a, b):\\n//     def pair(f):\\n//         return f(a, b)\\n//     return pair\\n//\\n// Implement car and cdr.\\n// REMOVE::arguments:number,number\\n\\nconst cons = (a, b) => [a, b];\\n\\nexport const dcpChallenge5 = (a, b) =>\\n    `Car: ${car(cons(a, b))}, Cdr: ${cdr(cons(a, b))}`;\\n\\nconst car = pair => pair[0];\\nconst cdr = pair => pair[1];\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #6\\n// ---------------------------------------------------------\\n// This problem was asked by Google.\\n//\\n// An XOR linked list is a more memory efficient doubly linked\\n// list. Instead of each node holding next and prev fields, it\\n// holds a field named both, which is an XOR of the next node\\n// and the previous node. Implement an XOR linked list; it has\\n// an add(element) which adds the element to the end, and a\\n// get(index) which returns the node at index.\\n//\\n// If using a language that has no pointers (such as Python),\\n// you can assume you have access to get_pointer and dereference_pointer\\n// functions that converts between nodes and memory addresses.\\n\\n// REMOVE::arguments:number,number\\n\\nexport const dcpChallenge6 = (a, b) => \\\"TODO\\\";\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #7\\n// ---------------------------------------------------------\\n// This problem was asked by Facebook.\\n//\\n// Given the mapping a = 1, b = 2, ... z = 26, and an encoded\\n// message, count the number of ways it can be decoded.\\n//\\n// For example, the message '111' would give 3, since it could\\n// be decoded as 'aaa', 'ka', and 'ak'.\\n//\\n// You can assume that the messages are decodable. For example,\\n// '001' is not allowed.\\n\\n// REMOVE::arguments:string\\n\\nexport const dcpChallenge7 = message => recursiveMessageDecoder([...message]);\\n\\nconst recursiveMessageDecoder = message => {\\n    if (message.length <= 1) return 1;\\n\\n    let result = recursiveMessageDecoder(message.slice(1));\\n\\n    if (Number(`${message[0]}${message[1]}`) <= 26)\\n        result += recursiveMessageDecoder(message.slice(2));\\n    return result;\\n};\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #8\\n// ---------------------------------------------------------\\n// This problem was asked by Google.\\n//\\n// A unival tree (which stands for \\\"universal value\\\") is a\\n// tree where all nodes under it have the same value.\\n//\\n// Given the root to a binary tree, count the number of\\n// unival subtrees.\\n//\\n// For example, the following tree has 5 unival subtrees:\\n//\\n//   0\\n//  / \\\\\\n// 1   0\\n//    / \\\\\\n//   1   0\\n//  / \\\\\\n// 1   1\\n\\nclass Node {\\n    constructor(val, left, right, name) {\\n        this.val = val;\\n        this.left = left;\\n        this.right = right;\\n    }\\n}\\n\\nconst calculateDepthUniversalTree = (node, accVal) => {\\n    if (node.val !== accVal) return 0;\\n    if (!node.left && !node.right) return 1;\\n    if (!node.left) return calculateDepthUniversalTree(node.right, accVal);\\n    if (!node.right) return calculateDepthUniversalTree(node.left, accVal);\\n    return (\\n        calculateDepthUniversalTree(node.left, accVal) *\\n        calculateDepthUniversalTree(node.right, accVal)\\n    );\\n};\\n\\nconst universalTree = node_tree =>\\n    node_tree\\n        ? calculateDepthUniversalTree(node_tree, node_tree.val) +\\n          universalTree(node_tree.left) +\\n          universalTree(node_tree.right)\\n        : null;\\n\\nexport const dcpChallenge8 = _ =>\\n    universalTree(\\n        new Node(\\n            0,\\n            new Node(1),\\n            new Node(0, new Node(1, new Node(1), new Node(1)), new Node(0))\\n        )\\n    );\\n\"","module.exports = \"// ---------------------------------------------------------\\n// Daily Coding Problem: Problem #9\\n// ---------------------------------------------------------\\n// This problem was asked by Airbnb.\\n//\\n// Given a list of integers, write a function that returns\\n// the largest sum of non-adjacent numbers. Numbers can be 0\\n// or negative.\\n//\\n// For example, [2, 4, 6, 2, 5] should return 13, since we\\n// pick 2, 6, and 5. [5, 1, 1, 5] should return 10, since\\n// we pick 5 and 5.\\n// REMOVE::arguments:string\\n\\nexport const dcpChallenge9 = list => list;\\n\"","var map = {\n\t\"./1.js\": 230,\n\t\"./10.js\": 231,\n\t\"./11.js\": 232,\n\t\"./12.js\": 233,\n\t\"./13.js\": 234,\n\t\"./14.js\": 235,\n\t\"./2.js\": 236,\n\t\"./3.js\": 237,\n\t\"./4.js\": 238,\n\t\"./5.js\": 239,\n\t\"./6.js\": 240,\n\t\"./7.js\": 241,\n\t\"./8.js\": 242,\n\t\"./9.js\": 243\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 229;","// ---------------------------------------------------------\n// Daily Coding Problem: Problem #1\n// ---------------------------------------------------------\n// This problem was recently asked by Google.\n//\n// Given a list of numbers and a number k, return whether any\n// two numbers from the list add up to k.\n//\n// Example:\n// Given [10, 15, 3, 7] and k of 17, return true since 10 + 7\n// is 17.\n// REMOVE::arguments:arrayNumber,number\nexport var dcpChallenge1 = function dcpChallenge1(list, k) {\n  return list.some(function (e) {\n    return list.includes(k - e);\n  });\n};","// ---------------------------------------------------------\n// Daily Coding Problem: Problem #10\n// ---------------------------------------------------------\n// This problem was asked by Apple.\n//\n// Implement a job scheduler which takes in a function f and\n// an integer n, and calls f after n milliseconds.\n// REMOVE::arguments:number\nvar callbackFunction = function callbackFunction(_) {\n  return alert(\"Here I am!\");\n};\n\nexport var dcpChallenge10 = function dcpChallenge10(n) {\n  return setTimeout(function (_) {\n    return callbackFunction();\n  }, n);\n};","// ---------------------------------------------------------\n// Daily Coding Problem: Problem #11\n// ---------------------------------------------------------\n// This problem was asked by Twitter.\n//\n// Implement an autocomplete system. That is, given a query\n// string s and a set of all possible query strings, return\n// all strings in the set that have s as a prefix.\n//\n// For example, given the query string de and the set of strings\n// [dog, deer, deal], return [deer, deal].\n// REMOVE::arguments:string,arrayString\nexport var dcpChallenge11 = function dcpChallenge11(s, a) {\n  return a.filter(function (queryString) {\n    return s === queryString.slice(0, s.length - queryString.length);\n  });\n};","import _toConsumableArray from \"/home/travis/build/Joseaay/dcp-challenges-solutions/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// ---------------------------------------------------------\n// Daily Coding Problem: Problem #12\n// ---------------------------------------------------------\n// This problem was asked by Amazon.\n//\n// There exists a staircase with N steps, and you can climb\n// up either 1 or 2 steps at a time. Given N, write a function\n// that returns the number of unique ways you can climb the\n// staircase. The order of the steps matters.\n//\n// For example, if N is 4, then there are 5 unique ways:\n//\n// 1, 1, 1, 1\n// 2, 1, 1\n// 1, 2, 1\n// 1, 1, 2\n// 2, 2\n//\n// What if, instead of being able to climb 1 or 2 steps at a time,\n// you could climb any number from a set of positive integers X?\n// For example, if X = {1, 3, 5}, you could climb 1, 3, or 5 steps\n// at a time.\n// REMOVE::arguments:number,arrayNumber\nexport var dcpChallenge12 = function dcpChallenge12(n, list) {\n  var tree = [];\n  tree[0] = 1;\n  tree[1] = 1;\n\n  _toConsumableArray(Object(Array(n + 1)).keys()).splice(2).forEach(function (e) {\n    tree[e] = list.map(function (step) {\n      return tree[e - step] ? tree[e - step] : 0;\n    }).reduce(function (a, b) {\n      return a + b;\n    });\n  });\n\n  return tree[n];\n};","// ---------------------------------------------------------\n// Daily Coding Problem: Problem #13\n// ---------------------------------------------------------\n// This problem was asked by Amazon.\n//\n// Given an integer k and a string s, find the length of the\n// longest substring that contains at most k distinct\n// characters.\n//\n// For example, given s = \"abcba\" and k = 2, the longest\n// substring with k distinct characters is \"bcb\".\n// REMOVE::arguments:number,string\nexport var dcpChallenge13 = function dcpChallenge13(k, s) {\n  return s.split(\"\").map(function (loopElement1, i) {\n    var distinctChars = new Set(loopElement1);\n    var stop = false;\n    return [loopElement1].concat(s.substr(i + 1).split(\"\").filter(function (loopElement2) {\n      if (distinctChars.size < k) {\n        distinctChars.add(loopElement2);\n        return loopElement2;\n      }\n\n      if (distinctChars.has(loopElement2) && !stop) {\n        return loopElement2;\n      } else {\n        stop = true;\n      }\n    }));\n  }).reduce(function (a, b) {\n    return b.length > a.length ? b : a;\n  }).join(\"\");\n};","// ---------------------------------------------------------\n// Daily Coding Problem: Problem #14\n// ---------------------------------------------------------\n// This problem was asked by Google.\n//\n// The area of a circle is defined as πr^2. Estimate π to 3\n// decimal places using a Monte Carlo method.\n//\n// Hint: The basic equation of a circle is x2 + y2 = r2.\n// REMOVE::arguments:number,string\nexport var dcpChallenge14 = function dcpChallenge14() {\n  return null;\n};","// ---------------------------------------------------------\n// Daily Coding Problem: Problem #2\n// ---------------------------------------------------------\n// This problem was asked by Uber.\n//\n// Given an array of integers, return a new array such that each\n// element at index i of the new array is the product of all the\n// numbers in the original array except the one at i.\n//\n// Example:\n// If our input was [1, 2, 3, 4, 5], the expected output would be\n// [120, 60, 40, 30, 24]. If our input was [3, 2, 1], the expected\n// output would be [2, 3, 6].\n// REMOVE::arguments:arrayNumber\nexport var dcpChallenge2 = function dcpChallenge2(list) {\n  return list.map(function (_, i) {\n    return list.filter(function (_, fi) {\n      return fi !== i;\n    }).reduce(function (a, b) {\n      return a * b;\n    });\n  });\n};","import _classCallCheck from \"/home/travis/build/Joseaay/dcp-challenges-solutions/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n// ---------------------------------------------------------\n// Daily Coding Problem: Problem #3\n// ---------------------------------------------------------\n// This problem was asked by Google.\n//\n// Given the root to a binary tree, implement serialize(root),\n// which serializes the tree into a string, and deserialize(s),\n// which deserializes the string back into the tree.\n//\n// Example:\n// given the following Node class\n//\n// class Node:\n// def __init__(self, val, left=None, right=None):\n//     self.val = val\n//     self.left = left\n//     self.right = right\n// The following test should pass:\n//\n// node = Node('root', Node('left', Node('left.left')), Node('right'))\n// assert deserialize(serialize(node)).left.left.val == 'left.left'\nvar Node = function Node(val, left, right) {\n  _classCallCheck(this, Node);\n\n  this.val = val;\n  this.left = left;\n  this.right = right;\n};\n\nvar serialize = function serialize(node) {\n  var nodeArray = [];\n  node ? nodeArray.push(node.val, serialize(node.left), serialize(node.right)) : nodeArray.push(\"void\");\n  return nodeArray.toString();\n};\n\nvar deserialize = function deserialize(string) {\n  return _deserialize(string.split(\",\"));\n};\n\nvar _deserialize = function _deserialize(nodeArray) {\n  if (nodeArray.length === 0) return undefined;\n  var value = nodeArray.shift();\n  return value !== \"void\" ? new Node(value, _deserialize(nodeArray), _deserialize(nodeArray)) : new Node();\n};\n\nexport var dcpChallenge3 = function dcpChallenge3() {\n  var node = new Node(\"root\", new Node(\"left\", new Node(\"left.left\")), new Node(\"right\"));\n  return deserialize(serialize(node)).left.left.val === \"left.left\";\n};","// ---------------------------------------------------------\n// Daily Coding Problem: Problem #4\n// ---------------------------------------------------------\n// This problem was asked by Stripe.\n//\n// Given an array of integers, find the first missing positive\n// integer in linear time and constant space. In other words,\n// find the lowest positive integer that does not exist in the\n// array. The array can contain duplicates and negative numbers\n// as well.\n//\n// For example, the input [3, 4, -1, 1] should give 2. The input\n// [1, 2, 0] should give 3.\n//\n//You can modify the input array in-place.\n// REMOVE::arguments:arrayNumber\nexport var dcpChallenge4 = function dcpChallenge4(list) {\n  var lowestNumber = list.reduce(function (a, b) {\n    return a && b >= 0 ? a < b ? a : b : 0;\n  });\n  return calculateLowestNumber(lowestNumber + 1, list);\n};\n\nvar calculateLowestNumber = function calculateLowestNumber(n, list) {\n  return !list.includes(n) ? n : calculateLowestNumber(n + 1, list);\n};","// ---------------------------------------------------------\n// Daily Coding Problem: Problem #5\n// ---------------------------------------------------------\n// This problem was asked by Jane Street.\n//\n// cons(a, b) constructs a pair, and car(pair) and cdr(pair)\n// returns the first and last element of that pair. For\n// example, car(cons(3, 4)) returns 3, and cdr(cons(3, 4))\n// returns 4.\n//\n// Given this implementation of cons:\n// def cons(a, b):\n//     def pair(f):\n//         return f(a, b)\n//     return pair\n//\n// Implement car and cdr.\n// REMOVE::arguments:number,number\nvar cons = function cons(a, b) {\n  return [a, b];\n};\n\nexport var dcpChallenge5 = function dcpChallenge5(a, b) {\n  return \"Car: \".concat(car(cons(a, b)), \", Cdr: \").concat(cdr(cons(a, b)));\n};\n\nvar car = function car(pair) {\n  return pair[0];\n};\n\nvar cdr = function cdr(pair) {\n  return pair[1];\n};","// ---------------------------------------------------------\n// Daily Coding Problem: Problem #6\n// ---------------------------------------------------------\n// This problem was asked by Google.\n//\n// An XOR linked list is a more memory efficient doubly linked\n// list. Instead of each node holding next and prev fields, it\n// holds a field named both, which is an XOR of the next node\n// and the previous node. Implement an XOR linked list; it has\n// an add(element) which adds the element to the end, and a\n// get(index) which returns the node at index.\n//\n// If using a language that has no pointers (such as Python),\n// you can assume you have access to get_pointer and dereference_pointer\n// functions that converts between nodes and memory addresses.\n// REMOVE::arguments:number,number\nexport var dcpChallenge6 = function dcpChallenge6(a, b) {\n  return \"TODO\";\n};","import _toConsumableArray from \"/home/travis/build/Joseaay/dcp-challenges-solutions/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// ---------------------------------------------------------\n// Daily Coding Problem: Problem #7\n// ---------------------------------------------------------\n// This problem was asked by Facebook.\n//\n// Given the mapping a = 1, b = 2, ... z = 26, and an encoded\n// message, count the number of ways it can be decoded.\n//\n// For example, the message '111' would give 3, since it could\n// be decoded as 'aaa', 'ka', and 'ak'.\n//\n// You can assume that the messages are decodable. For example,\n// '001' is not allowed.\n// REMOVE::arguments:string\nexport var dcpChallenge7 = function dcpChallenge7(message) {\n  return recursiveMessageDecoder(_toConsumableArray(message));\n};\n\nvar recursiveMessageDecoder = function recursiveMessageDecoder(message) {\n  if (message.length <= 1) return 1;\n  var result = recursiveMessageDecoder(message.slice(1));\n  if (Number(\"\".concat(message[0]).concat(message[1])) <= 26) result += recursiveMessageDecoder(message.slice(2));\n  return result;\n};","import _classCallCheck from \"/home/travis/build/Joseaay/dcp-challenges-solutions/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n// ---------------------------------------------------------\n// Daily Coding Problem: Problem #8\n// ---------------------------------------------------------\n// This problem was asked by Google.\n//\n// A unival tree (which stands for \"universal value\") is a\n// tree where all nodes under it have the same value.\n//\n// Given the root to a binary tree, count the number of\n// unival subtrees.\n//\n// For example, the following tree has 5 unival subtrees:\n//\n//   0\n//  / \\\n// 1   0\n//    / \\\n//   1   0\n//  / \\\n// 1   1\nvar Node = function Node(val, left, right, name) {\n  _classCallCheck(this, Node);\n\n  this.val = val;\n  this.left = left;\n  this.right = right;\n};\n\nvar calculateDepthUniversalTree = function calculateDepthUniversalTree(node, accVal) {\n  if (node.val !== accVal) return 0;\n  if (!node.left && !node.right) return 1;\n  if (!node.left) return calculateDepthUniversalTree(node.right, accVal);\n  if (!node.right) return calculateDepthUniversalTree(node.left, accVal);\n  return calculateDepthUniversalTree(node.left, accVal) * calculateDepthUniversalTree(node.right, accVal);\n};\n\nvar universalTree = function universalTree(node_tree) {\n  return node_tree ? calculateDepthUniversalTree(node_tree, node_tree.val) + universalTree(node_tree.left) + universalTree(node_tree.right) : null;\n};\n\nexport var dcpChallenge8 = function dcpChallenge8(_) {\n  return universalTree(new Node(0, new Node(1), new Node(0, new Node(1, new Node(1), new Node(1)), new Node(0))));\n};","// ---------------------------------------------------------\n// Daily Coding Problem: Problem #9\n// ---------------------------------------------------------\n// This problem was asked by Airbnb.\n//\n// Given a list of integers, write a function that returns\n// the largest sum of non-adjacent numbers. Numbers can be 0\n// or negative.\n//\n// For example, [2, 4, 6, 2, 5] should return 13, since we\n// pick 2, 6, and 5. [5, 1, 1, 5] should return 10, since\n// we pick 5 and 5.\n// REMOVE::arguments:string\nexport var dcpChallenge9 = function dcpChallenge9(list) {\n  return list;\n};","import React from \"react\";\n\nexport const AppContext = React.createContext({\n    selectedTab: 1,\n    changeTab: () => {}\n});\n","import React from \"react\";\nimport { AppContext } from \"../../AppContext\";\n\nexport const contextConsumer = WrappedComponent => {\n    const Wrapper = parentProps => (\n        <AppContext.Consumer>\n            {consumerProps => (\n                <WrappedComponent {...parentProps} {...consumerProps} />\n            )}\n        </AppContext.Consumer>\n    );\n    return Wrapper;\n};\n","import React from \"react\";\nimport \"./tab.scss\";\nimport { contextConsumer } from \"../../hoc/context-consumer.hoc\";\n\nexport const Tab = ({ style, i, selected, changeTab }) => (\n    <div\n        style={style}\n        onClick={() => changeTab(i)}\n        className={`tab ${selected === i ? \"tab--selected\" : \"\"}`}\n    >\n        {i}\n    </div>\n);\n\nexport const TabComponent = contextConsumer(Tab);\n","import React, { useState } from \"react\";\nimport \"./tabs.scss\";\nimport { TabComponent } from \"../Tab/Tab\";\nimport { contextConsumer } from \"../../hoc/context-consumer.hoc\";\n\nexport const Tabs = ({ selectedTab }) => {\n\tconst [tabs] = useState(14);\n\tconst [tabPage, setTabPage] = useState(0);\n\n\tconst nextPageButtonAvailable = () =>\n\t\tMath.abs(tabPage) < Math.floor(tabs / 10) * 1000;\n\tconst prevPageButtonAvailable = () => tabPage < 0;\n\n\tconst prevPage = _ =>\n\t\tprevPageButtonAvailable() ? setTabPage(tabPage + 1000) : null;\n\n\tconst nextPage = _ =>\n\t\tnextPageButtonAvailable() ? setTabPage(tabPage - 1000) : null;\n\n\treturn (\n\t\t<div className=\"tabs\">\n\t\t\t{prevPageButtonAvailable() && (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"tabs__arrow tabs__arrow--left\"\n\t\t\t\t\tonClick={prevPage}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t{[...Array(tabs).keys()].map((e, i) => (\n\t\t\t\t<TabComponent\n\t\t\t\t\tkey={`tab${i}`}\n\t\t\t\t\ti={i + 1}\n\t\t\t\t\tselected={selectedTab}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttransform: `translateX(${tabPage}%)`\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t))}\n\t\t\t{nextPageButtonAvailable() && (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"tabs__arrow tabs__arrow--right\"\n\t\t\t\t\tonClick={nextPage}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n};\n\nexport const TabsComponent = contextConsumer(Tabs);\n","export const findArguments = numChallenge =>\n    require(`!raw-loader!../../challenges/${numChallenge}.js`)\n        .split(\"\\n\")\n        .filter(line => line.includes(\"REMOVE::arguments:\"))\n        .join(\"\\n\")\n        .replace(\"// REMOVE::arguments:\", \"\")\n        .split(\",\");\n","import { findArguments } from \"./find-arguments\";\n\nexport const defaultResponse = {\n    error: null,\n    time: null,\n    result: null\n};\n\nconst _parseChallengeArguments = value => ({\n    arrayNumber: value.split(\",\").map(Number),\n    arrayString: value.split(\",\").map(String),\n    number: Number(value),\n    string: String(value)\n});\n\nexport const calculatePerformanceTime = (\n    funcToTest,\n    challengeNumber\n) => inputsValues => {\n    const initialTime = window.performance.now();\n    const challengeArguments = findArguments(challengeNumber);\n    let returnedResult;\n    try {\n        if (inputsValues.length === 0) throw Error();\n        const generatedArgs = Object.keys(inputsValues).map(x => {\n            if (inputsValues[x] === \"\" || inputsValues[x].includes(\" \"))\n                throw Error();\n            return _parseChallengeArguments(inputsValues[x])[\n                challengeArguments[x]\n            ];\n        });\n        returnedResult = funcToTest(...generatedArgs);\n    } catch (error) {\n        console.error(error);\n        return {\n            ...defaultResponse,\n            error:\n                \"ERROR:: Arguments passed have probably wrong format. Please check and try again.\"\n        };\n    }\n    const endTime = window.performance.now();\n    return {\n        ...defaultResponse,\n        time: endTime - initialTime,\n        result: `${returnedResult}`\n    };\n};\n","import React from \"react\";\n\nimport { findArguments } from \"./find-arguments\";\nconst inputTypes = (inputType, index, updateFunc, inputs) => {\n    return (\n        <div\n            className=\"challenge-solution__arguments-inputs\"\n            key={`arguments-inputs${index}`}\n        >\n            <label className=\"challenge-solution__label\">\n                {\n                    {\n                        arrayNumber:\n                            \"ARRAY: elements separated by comas, e.g. 1,2,3,4 => [1,2,3,4]\",\n                        arrayString:\n                            \"ARRAY: elements separated by comas, e.g. a,b,c,d => ['a','b','c','d']\",\n                        number: \"NUMBER: single number, e.g. 1 => Number(1)\",\n                        string:\n                            \"STRING: plain string, e.g. 'abc123' => String('abc123')\"\n                    }[inputType]\n                }\n            </label>\n            {inputType && (\n                <input\n                    className=\"challenge-solution__input\"\n                    onChange={e =>\n                        updateFunc({ ...inputs, [index]: e.target.value })\n                    }\n                />\n            )}\n        </div>\n    );\n};\n\nexport const generateInputFields = (num, updateFunc, inputs) => {\n    const args = findArguments(num);\n    return args.map((inputType, index) =>\n        inputTypes(inputType, index, updateFunc, inputs)\n    );\n};\n","import React, { useState } from \"react\";\nimport Highlight from \"react-highlight\";\nimport \"../../../node_modules/highlight.js/styles/monokai.css\";\nimport \"./challenge-solution.scss\";\nimport { getRawChallenge } from \"../../helpers/get-raw-challenge\";\nimport { calculatePerformanceTime } from \"../../helpers/calculate-performance-time\";\nimport { generateInputFields } from \"../../helpers/generate-input-fields\";\nimport { defaultResponse } from \"../../helpers/calculate-performance-time\";\nimport { contextConsumer } from \"../hoc/context-consumer.hoc\";\nconst getChallenge = challengeNumber =>\n    calculatePerformanceTime(\n        require(`../../../challenges/${challengeNumber}.js`)[\n            `dcpChallenge${challengeNumber}`\n        ],\n        challengeNumber\n    );\n\nexport const ChallengeSolution = ({ selectedTab }) => {\n    const [inputs, setInputs] = useState({});\n    const [result, setResult] = useState(defaultResponse);\n    const evaluateFunction = value => setResult(getChallenge(value)(inputs));\n    return (\n        <div className=\"challenge-solution\">\n            <h2 className=\"challenge-solution__title\">\n                Daily Coding Solution #{selectedTab}\n            </h2>\n            <p>\n                The following box will contain the Daily Coding Solution number{\" \"}\n                {selectedTab}. You'll find the definition for the exercise as a\n                comment above the function solution.\n            </p>\n            <p>\n                You're able to execute the proposed solution by sending custom\n                parameters to it. These parameters can be added in the{\" \"}\n                <b>Try it out!</b> section. Be aware of the arguments formating\n                as it can make the funstion to fail\n            </p>\n            <Highlight language=\"javascript\">\n                {getRawChallenge(selectedTab)}\n            </Highlight>\n            <h3 className=\"challenge-solution__subtitle\">Try it out!</h3>\n            <div className=\"challenge-solution__data-group\">\n                <div className=\"challenge-solution__data-group-arguments\">\n                    <h4>Arguments</h4>\n                    {generateInputFields(selectedTab, setInputs, inputs)}\n                    <button\n                        type=\"button\"\n                        className=\"challenge-solution__button\"\n                        onClick={() => evaluateFunction(selectedTab)}\n                    >\n                        Send\n                    </button>\n                </div>\n                <div className=\"challenge-solution__data-group-results\">\n                    <h4>Results</h4>\n                    {result.result && (\n                        <div className=\"challenge-solution__result\">\n                            <h5>Returned value</h5>\n                            {result.result}\n                            <h5>Execution time</h5>\n                            {`${result.time} ms`}\n                        </div>\n                    )}\n                    {result.error && (\n                        <div className=\"challenge-solution__error\">\n                            {result.error && `${result.error}`}\n                        </div>\n                    )}\n                    {!result.error &&\n                        !result.result &&\n                        `  There's no result yet`}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport const ChallengeSolutionComponent = contextConsumer(ChallengeSolution);\n","import { reduceFunctionGarbage } from \"./reduce-function-garbage\";\nexport const getRawChallenge = num =>\n    reduceFunctionGarbage(require(`!raw-loader!../../challenges/${num}.js`));\n","export const reduceFunctionGarbage = func =>\n    func\n        .split(\"\\n\")\n        .filter(line => !line.includes(\"REMOVE::\"))\n        .join(\"\\n\");\n","import React from \"react\";\nimport \"./box.scss\";\nimport { TabsComponent } from \"../common/Tabs/Tabs\";\nimport { ChallengeSolutionComponent } from \"../ChallengeSolution/ChallengeSolution\";\n\nexport const BoxComponent = () => (\n    <div className=\"box\">\n        <TabsComponent />\n        <div className=\"box__content\">\n            <ChallengeSolutionComponent />\n        </div>\n    </div>\n);\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport { BoxComponent } from \"./components/Box/Box\";\nimport { AppContext } from \"./AppContext\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTab: 1,\n            changeTab: this.changeTab\n        };\n    }\n\n    changeTab = selectedTab => {\n        this.setState(_ => ({\n            selectedTab\n        }));\n    };\n\n    render() {\n        return (\n            <AppContext.Provider value={this.state}>\n                <div className=\"dcp-challenges-solutions-app\">\n                    <h1 className=\"center\">\n                        Daily Coding Challenge - Javascript Solutions\n                    </h1>\n                    <BoxComponent />\n                </div>\n            </AppContext.Provider>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","var map = {\n\t\"./1.js\": 215,\n\t\"./10.js\": 216,\n\t\"./11.js\": 217,\n\t\"./12.js\": 218,\n\t\"./13.js\": 219,\n\t\"./14.js\": 220,\n\t\"./2.js\": 221,\n\t\"./3.js\": 222,\n\t\"./4.js\": 223,\n\t\"./5.js\": 224,\n\t\"./6.js\": 225,\n\t\"./7.js\": 226,\n\t\"./8.js\": 227,\n\t\"./9.js\": 228\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 7;"],"sourceRoot":""}